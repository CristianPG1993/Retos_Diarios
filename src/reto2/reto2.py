"""
Ejercicio 3: N√∫mero Feliz

Un n√∫mero se llama feliz si, al reemplazarlo repetidamente por la suma
de los cuadrados de sus d√≠gitos, eventualmente llega al n√∫mero 1.
Si entra en un bucle que nunca alcanza el 1, se considera infeliz.

Ejemplo:
- El n√∫mero 19 es feliz:
  1¬≤ + 9¬≤ = 82
  8¬≤ + 2¬≤ = 68
  6¬≤ + 8¬≤ = 100
  1¬≤ + 0¬≤ + 0¬≤ = 1

Objetivo:
Pedir al usuario un n√∫mero y determinar si es un n√∫mero feliz o no.
"""

# Preguntar al usuario por un n√∫mero y almacenarlo en una variable.
numero = int(input("Introduce un n√∫mero para comprobar si es feliz: "))

# Creamos un set() para almacenar los n√∫meros intermedios
# que se generan durante el proceso. Esto nos ayuda a detectar ciclos.
numeros_vistos = set()

# Funci√≥n para coger un n√∫mero, extraer sus d√≠gitos,
# elevar cada d√≠gito al cuadrado y devolver la suma.
def suma_cuadrado(n):
    suma = 0                    # Declaramos la variable dentro de la funci√≥n
    while n > 0:
        digito = n % 10         # Extraemos el √∫ltimo d√≠gito del n√∫mero
        suma += digito * digito # Elevamos al cuadrado el d√≠gito y lo acumulamos
        n = n // 10             # Eliminamos el √∫ltimo d√≠gito del n√∫mero
    return suma                 # Devolvemos la suma total

# Bucle principal: se repite mientras no lleguemos a 1 y el n√∫mero no se haya repetido
while numero != 1 and numero not in numeros_vistos:
    numeros_vistos.add(numero)         # Guardamos el n√∫mero actual para detectar ciclos
    numero = suma_cuadrado(numero)     # Calculamos la suma de cuadrados de sus d√≠gitos

# Resultado final despu√©s del bucle:
# Si llegamos a 1, el n√∫mero es feliz. Si se repiti√≥, no lo es.
if numero == 1:
    print("¬°El n√∫mero es feliz! üòÑ")
else:
    print("El n√∫mero NO es feliz. üò¢")
